#version 330 core

// Interpolated values from the vertex shaders
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform vec3 LightPosition_worldspace;

uniform vec3 diffuseColor;
uniform float specularity;
uniform float hardness;
uniform float alpha;

void main(){

	// Light emission properties
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 70.0f;
	
	// Material properties
	vec3 ambientColor = vec3(0.1,0.2,0.2) * diffuseColor;
	vec3 specularColor = vec3(1,1,1);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);

	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	float diffuseComponent = cosTheta / (distance*distance);
	float specularComponent = specularity * pow(cosAlpha, hardness) / (distance*distance);

	vec3 RGBcolor = ambientColor + LightColor * LightPower * (diffuseComponent * diffuseColor + specularComponent * specularColor);

	color.r = RGBcolor.r;
	color.g = RGBcolor.g;
	color.b = RGBcolor.b;
	color.a = (specularComponent * LightPower * (1-alpha)) + alpha;
}